[TOC]







# [?]fetch, merge, rebase하는 방법 

[?]# git diff-files
[?]# git reflog

# [?]변경내용 유지/ 변경내용 삭제



# remote branch 가지고 오는 방법

* git branch [branch name]
  * brnach name 확인하는 방법: git branch -r (remote branch list)

# remote branch 삭제 하는 방법 

* git push origin --delete A18_01220_20191126_commute_EFE

# 변경내용 취소하는 방법 

https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things

* git reset --hard 								: 모든 수정사항 되돌리기
* git checkout -- [파일경로/파일명]     : git add로 추가한것 지정한 파일명만 되돌리기
  * 파일경로/파일명: git stash로 수정된 파일 경로/파일명 copy&paste

# git add, git commit, git push 취소하기 

* git add 취소하기

  * git reset HEAD [file]	: staging에서 취소 

* git commit 최소하기 

  * git log 

  * ```javascript
    // [방법 1] commit을 취소하고 해당 파일들은 staged 상태로 워킹 디렉터리에 보존
    $ git reset --soft HEAD^
    // [방법 2] commit을 취소하고 해당 파일들은 unstaged 상태로 워킹 디렉터리에 보존
    $ git reset --mixed HEAD^ // 기본 옵션
    $ git reset HEAD^ // 위와 동일
    $ git reset HEAD~2 // 마지막 2개의 commit을 취소
    // [방법 3] commit을 취소하고 해당 파일들은 unstaged 상태로 워킹 디렉터리에서 삭제
    $ git reset --hard HEAD^
    ```

* commit message 변경하기 

  * git commit --amend

* working dir를 remote의 마지막 commit 상태로 되돌리고 싶을때 

  * git reset --hard HEAD

  

  

* git push 취소하기

  1. git reset HEAD^	: 가장 최근의 commit을 취소 (기본 옵션: --mixed)

  1. 원하는 시점으로 이동하기 
   * Reflog(브랜치와 HEAD가 지난 몇 달 동안에 가리켰었던 커밋) 목록 확인
       : git reflog 또는 $ git log -g
     *  원하는 시점으로 워킹 디렉터리를 되돌린다.
       : git reset HEAD@{number} 또는 $ git reset [commit id]
  
  2. 되돌려진상태에서 COMMIT
     * git commit -m "Write commit messges"
  
  3. 원격 저장소에 강제로 push 한다.
     * git push origin [branch name] -f
       || git push origin +[branch name]

# git stash

https://www.freecodecamp.org/news/useful-tricks-you-might-not-know-about-git-stash-e8a9490f0a1a/

* git stash
* git stash save "wirte message"
* git stash list
* git stash apply [stash@{1}]                        : stash 적용 후 stash list에서 유지 
* git stash pop  [stash@{1}]  						: stash 적용 후 stash list에서 제거 
* git stash drop [git stash list의 number]
* git stash show [git stash list의 number] -p : options -p로 인해 stash된 파일을 모두 볼 수 있다.



# 변경된 file들만 list 

* I personally use the combination of --stat and --oneline with the show command:
	git show --stat --oneline HEAD
	git show --stat --oneline b24f5fb
	git show --stat --oneline HEAD^^..HEAD

* If you do not like/want the addition/removal stats, you can replace --stat with --name-only
	git show --name-only --oneline HEAD
	git show --name-only --oneline b24f5fb
	git show --name-only --oneline HEAD^^..HEAD

* **git show --name-only**: HEAD의 commit내용, 수정한 files

# 파일 비교 - git diff

* git diff-tree --no-commit-id --name-only [COMMIT ID]: COMMIT ID의 COMMIT한 FILE들	
* git diff commit1 commit2: any two commits
* git ls-files -m: list up modified files
* git diff-files
* git diff {commit1} {commit2} > diff.txt: diff.txt 파일 이름으로 생성하기
  * git diff HEAD^ HEAD > diff.txt
  * git diff <commit1> <commit2> --name-only
  * 실제 eg)
    git diff > diff1.text		: 명령어 수행한 dir에 파일 생성
    git diff > D:\diff1.text	: dir에 파일 생성

# 다른 branch에 commit 한경우 

* git reset --soft HEAD^
* git stash 
-----------------------------------
* git checkout [BRANCH NAME]
* git stash pop
* git add . 
* git commit -m '[COMMIT EXPLANATION]'
* git push 



# 롤백 할때 

* commit 이후에 rollback process
* 작업 내용을 모두 제거 
git reset --soft HEAD^
(working dir에서 제거[변경내용을 제거 해야 하는 경우]: git reset --hard HEAD^)
* stage에 있는 파일을 stash에 보관
git stash save "this is commit version"

* git add .
git commit -m 'wirte message'



# [?]분기 푸쉬



# 배포 프로그램에 등록할때 

* commit한 파일 기준으로 배포 프로그램에 등록된다.

# git 취소하기 

* https://gmlwjd9405.github.io/2018/05/25/git-add-cancle.html









# terminal 화면 이동 hot key 

```
j, e, arrow down: 한줄씩 아래로 이동
k, arrow up: 한줄씩 위로 이동

p: 맨위로 이동

u: terminal 창 기준 반씩 위로 이동
d: terminal 창 기준 반씩 아래로 이동

b: terminal 창 기준 한장씩 위로 이동
f, z: terminal 창 기준 한장씩 아래로 이동
```

